Day 1 14/02/2024
Program 2-1: Toggling an LED in C
/* p2_1.c Toggle Green LED (LD2) on STM32F446RE Nucleo64 board at 1
Hz *
* This program toggles LD2 for 0.5 second ON and 0.5 second OFF * by
writing 0 or 1 to bit 5 of the Port A Output Data Register. * The
green LED (LD2) is connected to PA5.
* The LED is high active (a '1' turns on the LED).
* The default system clock is running at 16 MHz.
*
* This program was tested with Keil uVision v5.24a with DFP v2.11.0
*/
#include "stm32f4xx.h"
void delayMs(int n);
int main(void)
{
	RCC->AHB1ENR |= 1; /* enable GPIOA clock */
	GPIOA->MODER &= ~0x00000C00; /* clear pin mode */
	GPIOA->MODER |=0x00000400; /* set pin to output mode */
while(1)
{
	GPIOA->ODR |= 0x00000020; /* turn on LED */ delayMs(500);
	GPIOA->ODR &= ~0x00000020; /* turn off LED */ delayMs(500);
}
}
/* 16 MHz SYSCLK */
void delayMs(int n)
{
	int i;
	for (; n > 0; n--)
	for (i = 0; i < 3195; i++) ;
}


Program 2-3: Reading a switch and displaying it on an LED
/* p2_3.c Turn on or off LED by a switch
*
* This program turns on the green LED (LD2) by pressing the user *
button B1 of the Nucleo board.
* The user button is connected to PC13. It has a pull-up resitor *
so PC13 stays high when the button is not pressed.
* When the button is pressed, PC13 becomes low.
* The green LED (LD2) is connected to PA5.
* A high on PA5 turns on the LED.
*
* This program was tested with Keil uVision v5.24a with DFP v2.11.0
*/

#include "stm32f4xx.h"
int main(void) {
	RCC->AHB1ENR |= 4; /* enable GPIOC clock */ 
	RCC->AHB1ENR |= 1; /*enable GPIOA clock */
	GPIOA->MODER &= ~0x00000C00; /* clear pin mode */ 
	GPIOA->MODER |=0x00000400; /* set pin to output mode */
	GPIOC->MODER &= ~0x0C000000; /* clear pin mode to input mode */
while(1) {
	if (GPIOC->IDR & 0x2000) /* if PC13 is high */
		GPIOA->BSRR = 0x00200000; /* turn off green LED */ 
	else
		GPIOA->BSRR = 0x00000020; /* turn on green LED */ }
}


Day2 16/02/2024

//Where is the led connected?
//Port:  A
//Pin:   5

#define PERIPH_BASE				(0x40000000UL)
#define AHB1PERIPH_OFFSET			(0x00020000UL)
#define AHB1PERIPH_BASE	        		(PERIPH_BASE + AHB1PERIPH_OFFSET)
#define GPIOA_OFFSET				(0x0000UL)

#define GPIOA_BASE				(AHB1PERIPH_BASE + GPIOA_OFFSET)

#define RCC_OFFSET				(0x3800UL)
#define RCC_BASE				(AHB1PERIPH_BASE + RCC_OFFSET)


#define AHB1EN_R_OFFSET				(0x30UL)
#define RCC_AHB1EN_R            		(*(volatile unsigned int *)(RCC_BASE +  AHB1EN_R_OFFSET))

#define MODE_R_OFFSET				(0x00UL)
#define GPIOA_MODE_R				(*(volatile unsigned int *)(GPIOA_BASE + MODE_R_OFFSET))


#define OD_R_OFFSET				(0x14UL)
#define GPIOA_OD_R				(*(volatile unsigned int *)(GPIOA_BASE +  OD_R_OFFSET))


#define  GPIOAEN				(1U<<0) //   0b 0000 0000 0000 0000 0000 0000 0000 0001

#define PIN5					(1U<<5)
#define LED_PIN					 PIN5






/*
 * (1U<<10)  // Set bit 10 to 1
 *  &=~(1U<<11) //  Set bit 11 to 0*/




int main(void)
{
	/*1. Enable clock access to GPIOA*/
	RCC_AHB1EN_R  |=  GPIOAEN;

	/*2.Set PA5 as output pin*/
	GPIOA_MODE_R  |= (1U<<10);  // Set bit 10 to 1
	GPIOA_MODE_R  &=~(1U<<11); //  Set bit 11 to 0

	while(1)
	{
		/*3.Set PA5 high*/
		//GPIOA_OD_R |= LED_PIN;

		/*4:Experiment 2 : toggle PA5*/
		GPIOA_OD_R ^= LED_PIN;
		for(int i=0;i<100000;i++){}

	}
}



